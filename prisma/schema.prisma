generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  user_type     String    @default("student") // student, company, admin
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  profile          Profile?
  applications     Application[]
  company          Company?
  savedInternships SavedInternship[]
}

model Profile {
  id           String   @id @default(cuid())
  user_id      String   @unique
  bio          String?
  resume_url   String?
  skills       String   // Stored as comma-separated values
  education    String?  // Stored as JSON string
  experience   String?  // Stored as JSON string
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Company {
  id          String   @id @default(cuid())
  user_id     String   @unique
  name        String
  description String?
  website     String?
  logo_url    String?
  industry    String?
  size        String?
  location    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  internships Internship[]
}

model Internship {
  id          String   @id @default(cuid())
  company_id  String
  title       String
  description String
  location    String
  type        String   // full-time, part-time
  mode        String   // remote, hybrid, onsite
  stipend     String?
  duration    String
  skills      String   // Stored as comma-separated values
  perks       String?
  status      String   @default("draft") // draft, published, archived
  start_date  DateTime
  end_date    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  company          Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  applications     Application[]
  savedInternships SavedInternship[]
}

model Application {
  id            String    @id @default(cuid())
  internshipId  String
  name          String
  email         String
  resumeUrl     String
  coverLetter   String    @db.Text
  availability  String
  portfolioUrl  String?
  additionalInfo String?  @db.Text
  status        String    @default("PENDING")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([internshipId])
}

model SavedInternship {
  id            String   @id @default(cuid())
  user_id       String
  internship_id String
  created_at    DateTime @default(now())

  // Relations
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  internship Internship @relation(fields: [internship_id], references: [id], onDelete: Cascade)

  @@unique([user_id, internship_id])
}

